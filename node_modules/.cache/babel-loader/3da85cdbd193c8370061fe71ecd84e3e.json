{"ast":null,"code":"var _jsxFileName = \"/home/olof/sata-hakaton/front/src/pages/Product/Product.tsx\";\nimport React, { useEffect } from 'react';\nimport { isNil } from 'ramda';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport './Product.css';\nimport { MAX_ID } from '../../constants';\nimport { NotFound } from '../NotFound';\nimport { productInitialized } from '../../actions';\nimport Cart from './Cart';\nimport Offers from './Offers';\nimport Properties from './Properties';\n\nfunction Product({\n  match: {\n    params\n  },\n  location\n}) {\n  useEffect(() => {\n    if (isValidParams(params)) {\n      productInitialized(params.positionId);\n    }\n  }, [params.positionId]);\n\n  if (!isValidParams(params)) {\n    return React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    });\n  }\n\n  let numberLastPrice;\n  const parsedParams = queryString.parse(location.search);\n\n  if (parsedParams.startPrice) {\n    const startPrice = parsedParams.startPrice;\n\n    if (typeof startPrice === 'string') {\n      const parsedStartPrice = parseInt(startPrice);\n\n      if (!isNaN(parsedStartPrice)) {\n        numberLastPrice = parsedStartPrice;\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"product\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Cart, {\n    lastPrice: numberLastPrice,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }), React.createElement(Offers, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(Properties, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n}\n\nfunction isValidParams({\n  positionId\n}) {\n  if (isNil(positionId)) {\n    return false;\n  }\n\n  const parsedPositionId = parseId(positionId);\n  return !isNil(parsedPositionId);\n}\n\nfunction parseId(value) {\n  const parseId = parseInt(value);\n\n  if (!isNaN(parseId) && parseId < MAX_ID) {\n    return parseId;\n  }\n\n  return null;\n}\n\nexport default withRouter(Product);","map":{"version":3,"sources":["/home/olof/sata-hakaton/front/src/pages/Product/Product.tsx"],"names":["React","useEffect","isNil","withRouter","queryString","MAX_ID","NotFound","productInitialized","Cart","Offers","Properties","Product","match","params","location","isValidParams","positionId","numberLastPrice","parsedParams","parse","search","startPrice","parsedStartPrice","parseInt","isNaN","parsedPositionId","parseId","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,KAAT,QAAsB,OAAtB;AACA,SAA8BC,UAA9B,QAAgD,kBAAhD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,OAAO,eAAP;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAAQC,kBAAR,QAAiC,eAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAOA,SAASC,OAAT,CAAiB;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF,GAAT;AAAqBC,EAAAA;AAArB,CAAjB,EAAyD;AACrDb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,aAAa,CAACF,MAAD,CAAjB,EAA2B;AACvBN,MAAAA,kBAAkB,CAACM,MAAM,CAACG,UAAR,CAAlB;AACH;AACJ,GAJQ,EAIN,CAACH,MAAM,CAACG,UAAR,CAJM,CAAT;;AAMA,MAAI,CAACD,aAAa,CAACF,MAAD,CAAlB,EAA4B;AACxB,WAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAED,MAAII,eAAJ;AACA,QAAMC,YAAY,GAAGd,WAAW,CAACe,KAAZ,CAAkBL,QAAQ,CAACM,MAA3B,CAArB;;AACA,MAAIF,YAAY,CAACG,UAAjB,EAA6B;AACzB,UAAMA,UAAU,GAAGH,YAAY,CAACG,UAAhC;;AACA,QAAI,OAAQA,UAAR,KAAwB,QAA5B,EAAsC;AAClC,YAAMC,gBAAgB,GAAGC,QAAQ,CAACF,UAAD,CAAjC;;AACA,UAAI,CAACG,KAAK,CAACF,gBAAD,CAAV,EAA8B;AAC1BL,QAAAA,eAAe,GAAGK,gBAAlB;AACH;AACJ;AACJ;;AACD,SACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEL,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH;;AAED,SAASF,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA4C;AACxC,MAAId,KAAK,CAACc,UAAD,CAAT,EAAuB;AACnB,WAAO,KAAP;AACH;;AACD,QAAMS,gBAAgB,GAAGC,OAAO,CAACV,UAAD,CAAhC;AACA,SAAO,CAACd,KAAK,CAACuB,gBAAD,CAAb;AACH;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAgC;AAC5B,QAAMD,OAAO,GAAGH,QAAQ,CAACI,KAAD,CAAxB;;AACA,MAAI,CAACH,KAAK,CAACE,OAAD,CAAN,IAAmBA,OAAO,GAAGrB,MAAjC,EAAyC;AACrC,WAAOqB,OAAP;AACH;;AACD,SAAO,IAAP;AACH;;AACD,eAAevB,UAAU,CAACQ,OAAD,CAAzB","sourcesContent":["import React, {useEffect} from 'react'\nimport { isNil } from 'ramda'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport queryString from 'query-string'\n\nimport './Product.css'\nimport { MAX_ID } from '../../constants'\nimport { NotFound } from '../NotFound'\nimport {productInitialized} from '../../actions'\nimport Cart from './Cart'\nimport Offers from './Offers'\nimport Properties from './Properties'\n\ntype Params = { positionId?: string }\n\ninterface Props extends RouteComponentProps<any> {\n}\n\nfunction Product({ match: { params }, location }: Props) {\n    useEffect(() => {\n        if (isValidParams(params)) {\n            productInitialized(params.positionId)\n        }\n    }, [params.positionId])\n\n    if (!isValidParams(params)) {\n        return <NotFound/>\n    }\n\n    let numberLastPrice\n    const parsedParams = queryString.parse(location.search)\n    if (parsedParams.startPrice) {\n        const startPrice = parsedParams.startPrice\n        if (typeof (startPrice) === 'string') {\n            const parsedStartPrice = parseInt(startPrice)\n            if (!isNaN(parsedStartPrice)) {\n                numberLastPrice = parsedStartPrice\n            }\n        }\n    }\n    return (\n        <div className=\"product\">\n            <Cart lastPrice={numberLastPrice}/>\n            <Offers/>\n            <Properties />\n        </div>\n    )\n}\n\nfunction isValidParams({positionId}: Params){\n    if (isNil(positionId)) {\n        return false\n    }\n    const parsedPositionId = parseId(positionId)\n    return !isNil(parsedPositionId)\n}\n\nfunction parseId(value: string) {\n    const parseId = parseInt(value)\n    if (!isNaN(parseId) && parseId < MAX_ID) {\n        return parseId\n    }\n    return null\n}\nexport default withRouter(Product)"]},"metadata":{},"sourceType":"module"}