{"ast":null,"code":"export const empty = () => {}; // forms: [ 'вопрос', 'вопроса', 'вопросов' ]\n\nexport function getWordWithNumberInRightCase(count, forms) {\n  const number = Math.abs(count) % 100;\n  const digit = number % 10;\n\n  if (number >= 5 && number <= 20) {\n    return forms[2];\n  }\n\n  if (digit === 1) {\n    return forms[0];\n  }\n\n  if (digit >= 2 && digit <= 4) {\n    return forms[1];\n  }\n\n  return forms[2];\n}\nexport function numberWithSpaces(number) {\n  return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n}\nexport function filterByType(companies, type) {\n  return companies.filter(company => company.organizationType === type);\n}","map":{"version":3,"sources":["/home/olof/sata-hakaton/front/src/utils/common.ts"],"names":["empty","getWordWithNumberInRightCase","count","forms","number","Math","abs","digit","numberWithSpaces","toString","replace","filterByType","companies","type","filter","company","organizationType"],"mappings":"AAGA,OAAO,MAAMA,KAAK,GAAG,MAAM,CAAE,CAAtB,C,CAEP;;AACA,OAAO,SAASC,4BAAT,CAAsCC,KAAtC,EAAqDC,KAArD,EAAgG;AACnG,QAAMC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkB,GAAjC;AACA,QAAMK,KAAK,GAAGH,MAAM,GAAG,EAAvB;;AAEA,MAAIA,MAAM,IAAI,CAAV,IAAeA,MAAM,IAAI,EAA7B,EAAiC;AAC7B,WAAOD,KAAK,CAAE,CAAF,CAAZ;AACH;;AAED,MAAII,KAAK,KAAK,CAAd,EAAiB;AACb,WAAOJ,KAAK,CAAE,CAAF,CAAZ;AACH;;AAED,MAAII,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA3B,EAA8B;AAC1B,WAAOJ,KAAK,CAAE,CAAF,CAAZ;AACH;;AAED,SAAOA,KAAK,CAAE,CAAF,CAAZ;AACH;AAED,OAAO,SAASK,gBAAT,CAA0BJ,MAA1B,EAA0C;AAC7C,SAAOA,MAAM,CAACK,QAAP,GAAkBC,OAAlB,CAA0B,uBAA1B,EAAmD,GAAnD,CAAP;AACH;AAED,OAAO,SAASC,YAAT,CAAsBC,SAAtB,EAA6CC,IAA7C,EAAqE;AACxE,SAAOD,SAAS,CAACE,MAAV,CAAkBC,OAAD,IAAaA,OAAO,CAACC,gBAAR,KAA6BH,IAA3D,CAAP;AACH","sourcesContent":["import {ICompany} from '../selectors/search'\nimport {OrganizationType} from '../dto/Product'\n\nexport const empty = () => {}\n\n// forms: [ 'вопрос', 'вопроса', 'вопросов' ]\nexport function getWordWithNumberInRightCase(count: number, forms: [ string, string, string ]): string {\n    const number = Math.abs(count) % 100\n    const digit = number % 10\n\n    if (number >= 5 && number <= 20) {\n        return forms[ 2 ]\n    }\n\n    if (digit === 1) {\n        return forms[ 0 ]\n    }\n\n    if (digit >= 2 && digit <= 4) {\n        return forms[ 1 ]\n    }\n\n    return forms[ 2 ]\n}\n\nexport function numberWithSpaces(number: number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \");\n}\n\nexport function filterByType(companies: ICompany[], type: OrganizationType) {\n    return companies.filter((company) => company.organizationType === type)\n}"]},"metadata":{},"sourceType":"module"}