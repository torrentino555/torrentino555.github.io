{"ast":null,"code":"var _jsxFileName = \"/home/olof/sata-hakaton/front/src/pages/Search/Search.tsx\";\nimport { isNil } from 'ramda';\nimport React, { useEffect } from 'react';\nimport queryString from 'query-string';\nimport { useSelector } from 'react-redux';\nimport './Search.css';\nimport { searching } from '../../actions';\nimport { filterByType } from '../../utils';\nimport { OrganizationType } from '../../dto/Product';\nimport ProductItem from '../Products/ProductItem';\nimport CompanyGroup from '../Products/CompanyGroup';\nimport { selectSearchProducts } from '../../selectors/search';\nexport default function Search({\n  location\n}) {\n  const parsedParams = queryString.parse(location.search);\n  const q = parsedParams.q;\n  const isNotValidQuery = isNil(q) || q === '';\n  useEffect(() => {\n    if (!isNotValidQuery) {\n      searching(q);\n    }\n  }, [q, isNotValidQuery]);\n  const products = useSelector(selectSearchProducts);\n\n  if (isNotValidQuery) {\n    return React.createElement(\"div\", {\n      className: \"search__empty-query\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0435\\u043D \\u043F\\u0443\\u0441\\u0442\\u043E\\u0439 \\u043F\\u043E\\u0438\\u0441\\u043A\\u043E\\u0432\\u044B\\u0439 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\");\n  }\n\n  if (products.length === 0) {\n    return React.createElement(\"div\", {\n      className: \"search__empty-query\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\");\n  }\n\n  return React.createElement(\"div\", {\n    className: \"products\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, products.map(product => {\n    const companiesOrg = filterByType(product.companies, OrganizationType.ORG);\n    const companiesIP = filterByType(product.companies, OrganizationType.IP);\n    const companiesSAM = filterByType(product.companies, OrganizationType.SAM);\n    return React.createElement(\"div\", {\n      className: \"products-item\",\n      key: product.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(ProductItem, {\n      product: product,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), companiesOrg.length > 0 && React.createElement(CompanyGroup, {\n      title: \"\\u041E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438\",\n      companies: companiesOrg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), companiesIP.length > 0 && React.createElement(CompanyGroup, {\n      title: \"\\u0418\\u043D\\u0434\\u0438\\u0432\\u0438\\u0434\\u0443\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u043F\\u0440\\u0435\\u0434\\u043F\\u0440\\u0438\\u043D\\u0438\\u043C\\u0430\\u0442\\u0435\\u043B\\u0438\",\n      companies: companiesIP,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), companiesSAM.length > 0 && React.createElement(CompanyGroup, {\n      title: \"\\u0421\\u0430\\u043C\\u043E\\u0437\\u0430\\u043D\\u044F\\u0442\\u044B\\u0435\",\n      companies: companiesSAM,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }));\n}","map":{"version":3,"sources":["/home/olof/sata-hakaton/front/src/pages/Search/Search.tsx"],"names":["isNil","React","useEffect","queryString","useSelector","searching","filterByType","OrganizationType","ProductItem","CompanyGroup","selectSearchProducts","Search","location","parsedParams","parse","search","q","isNotValidQuery","products","length","map","product","companiesOrg","companies","ORG","companiesIP","IP","companiesSAM","SAM","id"],"mappings":";AAAA,SAASA,KAAT,QAAsB,OAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAO,cAAP;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,SAAQC,oBAAR,QAAmC,wBAAnC;AAOA,eAAe,SAASC,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAAsC;AACjD,QAAMC,YAAY,GAAGV,WAAW,CAACW,KAAZ,CAAkBF,QAAQ,CAACG,MAA3B,CAArB;AADiD,QAEzCC,CAFyC,GAEnCH,YAFmC,CAEzCG,CAFyC;AAGjD,QAAMC,eAAe,GAAGjB,KAAK,CAACgB,CAAD,CAAL,IAAYA,CAAC,KAAK,EAA1C;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACe,eAAL,EAAsB;AAClBZ,MAAAA,SAAS,CAACW,CAAD,CAAT;AACH;AACJ,GAJQ,EAIN,CAAEA,CAAF,EAAKC,eAAL,CAJM,CAAT;AAKA,QAAMC,QAAQ,GAAGd,WAAW,CAACM,oBAAD,CAA5B;;AAEA,MAAIO,eAAJ,EAAqB;AACjB,WACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+KADJ;AAKH;;AAED,MAAIC,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACvB,WACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sGADJ;AAKH;;AACD,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMD,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AACxB,UAAMC,YAAY,GAAGhB,YAAY,CAACe,OAAO,CAACE,SAAT,EAAoBhB,gBAAgB,CAACiB,GAArC,CAAjC;AACA,UAAMC,WAAW,GAAGnB,YAAY,CAACe,OAAO,CAACE,SAAT,EAAoBhB,gBAAgB,CAACmB,EAArC,CAAhC;AACA,UAAMC,YAAY,GAAGrB,YAAY,CAACe,OAAO,CAACE,SAAT,EAAoBhB,gBAAgB,CAACqB,GAArC,CAAjC;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,GAAG,EAAEP,OAAO,CAACQ,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAER,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKC,YAAY,CAACH,MAAb,GAAsB,CAAtB,IAA2B,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,oEAApB;AAAkC,MAAA,SAAS,EAAEG,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFhC,EAGKG,WAAW,CAACN,MAAZ,GAAqB,CAArB,IAA0B,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,iLAApB;AAAqD,MAAA,SAAS,EAAEM,WAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH/B,EAIKE,YAAY,CAACR,MAAb,GAAsB,CAAtB,IAA2B,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,oEAApB;AAAkC,MAAA,SAAS,EAAEQ,YAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJhC,CADJ;AAOE,GAZJ,CADN,CADJ;AAkBH","sourcesContent":["import { isNil } from 'ramda'\nimport React, { useEffect } from 'react'\nimport queryString from 'query-string'\nimport { RouteComponentProps } from 'react-router'\nimport {useSelector} from 'react-redux'\n\nimport './Search.css'\nimport { searching } from '../../actions'\nimport {filterByType} from '../../utils'\nimport {OrganizationType} from '../../dto/Product'\nimport ProductItem from '../Products/ProductItem'\nimport CompanyGroup from '../Products/CompanyGroup'\nimport {selectSearchProducts} from '../../selectors/search'\n\n\ninterface Props extends RouteComponentProps<any> {\n\n}\n\nexport default function Search({ location } : Props) {\n    const parsedParams = queryString.parse(location.search)\n    const { q } = parsedParams\n    const isNotValidQuery = isNil(q) || q === ''\n\n    useEffect(() => {\n        if (!isNotValidQuery) {\n            searching(q)\n        }\n    }, [ q, isNotValidQuery ])\n    const products = useSelector(selectSearchProducts)\n\n    if (isNotValidQuery) {\n        return (\n            <div className=\"search__empty-query\">\n                Введен пустой поисковый запрос\n            </div>\n        )\n    }\n\n    if (products.length === 0) {\n        return (\n            <div className=\"search__empty-query\">\n                Ничего не найдено\n            </div>\n        )\n    }\n    return (\n        <div className=\"products\">\n            { products.map((product) => {\n                const companiesOrg = filterByType(product.companies, OrganizationType.ORG)\n                const companiesIP = filterByType(product.companies, OrganizationType.IP)\n                const companiesSAM = filterByType(product.companies, OrganizationType.SAM)\n\n                return (\n                    <div className=\"products-item\" key={product.id}>\n                        <ProductItem product={product}/>\n                        {companiesOrg.length > 0 && <CompanyGroup title=\"Организации\" companies={companiesOrg}/> }\n                        {companiesIP.length > 0 && <CompanyGroup title=\"Индивидуальные предприниматели\" companies={companiesIP}/> }\n                        {companiesSAM.length > 0 && <CompanyGroup title=\"Самозанятые\" companies={companiesSAM}/> }\n                    </div>\n                )})\n            }\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}